[tool.poetry]
name = "starlite-pg-redis-docker"
version = "0.1.0"
description = "An example Starlite application with Redis, Postgres and Docker"
authors = ["yudjinn <yudjinncoding@gmail.com>", "Peter Schutt <peter.github@proton.me>", "Na'aman Hirschfeld <nhirschfeld@gmail.com>"]
packages = [{include = "app" }]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.10"
alembic = "^1.7"
asyncpg = "^0.26"
gunicorn = "^20.1"
httpx = "^0.23"
pydantic = "^1.9"
redis = "^4.3"
sentry-sdk = "^1.7"
sqlalchemy = { git = "https://github.com/sqlalchemy/sqlalchemy.git", branch = "main" }
starlite = "^1.6"
uvicorn = { extras = ["standard"], version = "^0.18" }

[tool.poetry.dev-dependencies]
coverage = {extras = ["toml"], version = "*"}
pre-commit = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
pytest-dotenv = "*"
starlite = { extras = ["testing"], version = "^1.6" }
types-redis = "*"
types-requests = "*"

[tool.poetry.scripts]
pg-ready = "app.utils.postgres_ready:main"
redis-ready = "app.utils.redis_ready:main"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100

[tool.isort]
profile = "black"
overwrite_in_place = true

[tool.coverage.report]
show_missing = true
exclude_lines = [
    'if TYPE_CHECKING:',
    'pragma: no cover',
    "if __name__ == '__main__':",
]

[tool.coverage.run]
omit = [
    "tests/*",
    "src/app/utils/restartable_worker.py",
    "src/app/utils/redis_ready.py",
    "src/app/utils/postgres_ready.py",
]

[tool.mypy]
check_untyped_defs = true
exclude = ["alembic/*"]
disallow_incomplete_defs = true
disallow_untyped_defs = true
ignore_missing_imports = true
show_error_codes = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true
plugins = ["pydantic.mypy"]

[tool.pytest.ini_options]
addopts = "--cov=app -v --doctest-modules --doctest-glob=*.md --ignore=gunicorn.conf.py --ignore=alembic"
asyncio_mode = "auto"
env_files = [".env.example"]

[tool.pylint.MESSAGE_CONTROL]
disable = [
    "fixme",
    "invalid-name",
    "missing-class-docstring",
    "missing-module-docstring",
    "super-init-not-called",
    "too-few-public-methods",
    "duplicate-code",
]
enable = "useless-suppression"

[tool.pylint.REPORTS]
reports = "no"

[tool.pylint.FORMAT]
max-line-length = "100"
